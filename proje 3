from inventory import Item, Inventory

def main():
    """Kullanıcı etkileşimi için ana fonksiyon. Bu fonksiyon, kullanıcıya envanter yönetim sistemi ile ilgili seçenekler sunar ve kullanıcının seçimine göre işlemler yapar."""
    inventory = Inventory()  # Inventory sınıfından bir envanter nesnesi oluşturur.
    
    while True:
        # Kullanıcıya seçenekleri sunar.
        print("\nEnvanter Yönetim Sistemi")
        print("1. Öğe Ekle")
        print("2. Öğe Güncelle")
        print("3. Öğe Kaldır")
        print("4. Tüm Öğeleri Listele")
        print("5. Çıkış")
        choice = input("Seçiminizi yapın: ")  # Kullanıcının seçimini alır.

        if choice == '1':
            # Kullanıcıdan yeni öğe bilgilerini alır.
            item_id = input("Öğe ID: ")
            name = input("Öğe Adı: ")
            quantity = int(input("Miktar: "))
            price = float(input("Fiyat: "))
            item = Item(item_id, name, quantity, price)  # Yeni bir öğe oluşturur.
            inventory.add_item(item)  # Öğeyi envantere ekler.
        elif choice == '2':
            # Kullanıcıdan güncellenecek öğe bilgilerini alır.
            item_id = input("Güncellenecek Öğe ID: ")
            quantity = input("Yeni Miktar (boş bırakabilirsiniz): ")
            price = input("Yeni Fiyat (boş bırakabilirsiniz): ")
            quantity = int(quantity) if quantity else None  # Miktar bilgisini alır, boş bırakılırsa None yapar.
            price = float(price) if price else None  # Fiyat bilgisini alır, boş bırakılırsa None yapar.
            inventory.update_item(item_id, quantity, price)  # Öğeyi günceller.
        elif choice == '3':
            # Kullanıcıdan kaldırılacak öğenin ID'sini alır.
            item_id = input("Kaldırılacak Öğe ID: ")
            inventory.remove_item(item_id)  # Öğeyi envanterden kaldırır.
        elif choice == '4':
            # Envanterdeki tüm öğeleri listeler.
            inventory.list_items()
        elif choice == '5':
            # Döngüden çıkar ve programı sonlandırır.
            break
        else:
            # Geçersiz seçim yapıldığında uyarı mesajı verir.
            print("Geçersiz seçenek. Tekrar deneyin.")

if __name__ == "__main__":
    # Eğer bu dosya doğrudan çalıştırılıyorsa, main fonksiyonunu çağırır.
    main()
class Item:
    def __init__(self, item_id, name, quantity, price):
        """
        Item sınıfı, her bir öğenin kimliğini, ismini, miktarını ve fiyatını tutar.
        :param item_id: Öğenin kimliği.
        :param name: Öğenin ismi.
        :param quantity: Öğenin miktarı.
        :param price: Öğenin fiyatı.
        """
        self.item_id = item_id
        self.name = name
        self.quantity = quantity
        self.price = price

    def update_quantity(self, quantity):
        """
        Öğenin miktarını günceller.
        :param quantity: Yeni miktar.
        """
        self.quantity = quantity

    def update_price(self, price):
        """
        Öğenin fiyatını günceller.
        :param price: Yeni fiyat.
        """
        self.price = price

    def __str__(self):
        """
        Öğenin detaylarını döner.
        :return: Öğenin kimliği, ismi, miktarı ve fiyatı.
        """
        return f"ID: {self.item_id}, Name: {self.name}, Quantity: {self.quantity}, Price: {self.price}"


class Inventory:
    def __init__(self):
        #'self.items' adında bir sözlük oluşturur.Bu sözlük , envanterdeki öğeleri 'item_id' anahtarı ile saklar.
        """
        Inventory sınıfı, envanteri yönetir ve öğe ekleme, güncelleme, kaldırma işlemlerini yapar.
        items sözlüğü, öğeleri item_id anahtarı ile saklar.
        """
        self.items = {}

    def add_item(self, item):
        """
        Envantere yeni bir öğe ekler.
        :param item: Eklenmek istenen öğe.
        """
        if item.item_id in self.items:
            # Öğenin zaten mevcut olup olmadığını kontrol eder.
            print("Item already exists.")
        else:
            # Öğeyi envantere ekler.
            self.items[item.item_id] = item

    def update_item(self, item_id, quantity=None, price=None):
        """
        Envanterdeki bir öğeyi günceller.
        :param item_id: Güncellenecek öğenin kimliği.
        :param quantity: Yeni miktar (opsiyonel).
        :param price: Yeni fiyat (opsiyonel).
        """
        if item_id in self.items:
            # Eğer öğe envanterde varsa, miktar veya fiyat bilgilerini günceller.
            if quantity is not None:
                self.items[item_id].update_quantity(quantity)
            if price is not None:
                self.items[item_id].update_price(price)
        else:
            # Eğer öğe envanterde yoksa, hata mesajı verir.
            print("Item not found.")

    def remove_item(self, item_id):
        """
        Envanterden bir öğeyi kaldırır.
        :param item_id: Kaldırılacak öğenin kimliği.
        """
        if item_id in self.items:
            # Eğer öğe envanterde varsa, öğeyi siler.
            del self.items[item_id]
        else:
            # Eğer öğe envanterde yoksa, hata mesajı verir.
            print("Item not found.")

    def list_items(self):
        """
        Envanterdeki tüm öğeleri listeler.
        """
        if not self.items:
            # Eğer envanterde hiç öğe yoksa, envanterin boş olduğunu belirtir.
            print("Envanter boş.")
        for item in self.items.values():
            # Envanterdeki her bir öğeyi yazdırır.
            print(item)
from inventory import Item, Inventory

def test_inventory():
    """
    Envanter yönetim sistemini test eden fonksiyon.
    Bu fonksiyon, envanter yönetim sistemi üzerinde çeşitli testler yapar
    ve sonuçları kontrol eder.
    """
    inventory = Inventory()  # Inventory sınıfından bir envanter nesnesi oluşturur.

    # Öğe ekleme testleri
    item1 = Item("1", "Kalem", 100, 1.5)  # Yeni bir öğe oluşturur.
    item2 = Item("2", "Silgi", 50, 0.75)  # Yeni bir öğe oluşturur.
    inventory.add_item(item1)  # Öğeyi envantere ekler.
    inventory.add_item(item2)  # Öğeyi envantere ekler.
    
    assert len(inventory.items) == 2  # Envanterdeki öğe sayısının 2 olduğunu doğrular.
    
    # Öğe güncelleme testi
    inventory.update_item("1", quantity=120)  # Öğenin miktarını günceller.
    assert inventory.items["1"].quantity == 120  # Öğenin miktarının doğru güncellendiğini doğrular.
    
    # Öğe kaldırma testi
    inventory.remove_item("2")  # Öğeyi envanterden kaldırır.
    assert len(inventory.items) == 1  # Envanterdeki öğe sayısının 1 olduğunu doğrular.

    print("Tüm testler başarılı.")  # Tüm testler başarılı olduğunda mesajı yazdırır.

if __name__ == "__main__":
    # Eğer bu dosya doğrudan çalıştırılıyorsa, test_inventory fonksiyonunu çağırır.
    test_inventory()
